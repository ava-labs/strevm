// Code generated by canoto. DO NOT EDIT.
// versions:
// 	canoto v0.17.0
// source: exec.go

package sae

import (
	"io"
	"reflect"
	"sync/atomic"

	"github.com/StephenButtolph/canoto"
)

// Ensure that unused imports do not error
var (
	_ atomic.Uint64

	_ = io.ErrUnexpectedEOF
)

const (
	canoto__executionResults__by__tag            = "\x0a" // canoto.Tag(1, canoto.Len)
	canoto__executionResults__gasUsed__tag       = "\x11" // canoto.Tag(2, canoto.I64)
	canoto__executionResults__receiptRoot__tag   = "\x1a" // canoto.Tag(3, canoto.Len)
	canoto__executionResults__stateRootPost__tag = "\x22" // canoto.Tag(4, canoto.Len)
)

type canotoData_executionResults struct {
	size atomic.Uint64
}

// CanotoSpec returns the specification of this canoto message.
func (*executionResults) CanotoSpec(types ...reflect.Type) *canoto.Spec {
	types = append(types, reflect.TypeOf(executionResults{}))
	var zero executionResults
	s := &canoto.Spec{
		Name: "executionResults",
		Fields: []canoto.FieldType{
			canoto.FieldTypeFromField(
				/*type inference:*/ (&zero.by),
				/*FieldNumber:   */ 1,
				/*Name:          */ "by",
				/*FixedLength:   */ 0,
				/*Repeated:      */ false,
				/*OneOf:         */ "",
				/*types:         */ types,
			),
			canoto.FieldTypeFromFint(
				/*type inference:*/ zero.gasUsed,
				/*FieldNumber:   */ 2,
				/*Name:          */ "gasUsed",
				/*FixedLength:   */ 0,
				/*Repeated:      */ false,
				/*OneOf:         */ "",
			),
			{
				FieldNumber:    3,
				Name:           "receiptRoot",
				OneOf:          "",
				TypeFixedBytes: uint64(len(zero.receiptRoot)),
			},
			{
				FieldNumber:    4,
				Name:           "stateRootPost",
				OneOf:          "",
				TypeFixedBytes: uint64(len(zero.stateRootPost)),
			},
		},
	}
	s.CalculateCanotoCache()
	return s
}

// MakeCanoto creates a new empty value.
func (*executionResults) MakeCanoto() *executionResults {
	return new(executionResults)
}

// UnmarshalCanoto unmarshals a Canoto-encoded byte slice into the struct.
//
// During parsing, the canoto cache is saved.
func (c *executionResults) UnmarshalCanoto(bytes []byte) error {
	r := canoto.Reader{
		B: bytes,
	}
	return c.UnmarshalCanotoFrom(r)
}

// UnmarshalCanotoFrom populates the struct from a [canoto.Reader]. Most users
// should just use UnmarshalCanoto.
//
// During parsing, the canoto cache is saved.
//
// This function enables configuration of reader options.
func (c *executionResults) UnmarshalCanotoFrom(r canoto.Reader) error {
	// Zero the struct before unmarshaling.
	*c = executionResults{}
	c.canotoData.size.Store(uint64(len(r.B)))

	var minField uint32
	for canoto.HasNext(&r) {
		field, wireType, err := canoto.ReadTag(&r)
		if err != nil {
			return err
		}
		if field < minField {
			return canoto.ErrInvalidFieldOrder
		}

		switch field {
		case 1:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Read the bytes for the field.
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}
			r.Unsafe = originalUnsafe

			// Unmarshal the field from the bytes.
			remainingBytes := r.B
			r.B = msgBytes
			if err := (&c.by).UnmarshalCanotoFrom(r); err != nil {
				return err
			}
			r.B = remainingBytes
		case 2:
			if wireType != canoto.I64 {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadFint64(&r, &c.gasUsed); err != nil {
				return err
			}
			if canoto.IsZero(c.gasUsed) {
				return canoto.ErrZeroValue
			}
		case 3:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			const (
				expectedLength       = len(c.receiptRoot)
				expectedLengthUint64 = uint64(expectedLength)
			)
			var length uint64
			if err := canoto.ReadUint(&r, &length); err != nil {
				return err
			}
			if length != expectedLengthUint64 {
				return canoto.ErrInvalidLength
			}
			if expectedLength > len(r.B) {
				return io.ErrUnexpectedEOF
			}

			copy((&c.receiptRoot)[:], r.B)
			if canoto.IsZero(c.receiptRoot) {
				return canoto.ErrZeroValue
			}
			r.B = r.B[expectedLength:]
		case 4:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			const (
				expectedLength       = len(c.stateRootPost)
				expectedLengthUint64 = uint64(expectedLength)
			)
			var length uint64
			if err := canoto.ReadUint(&r, &length); err != nil {
				return err
			}
			if length != expectedLengthUint64 {
				return canoto.ErrInvalidLength
			}
			if expectedLength > len(r.B) {
				return io.ErrUnexpectedEOF
			}

			copy((&c.stateRootPost)[:], r.B)
			if canoto.IsZero(c.stateRootPost) {
				return canoto.ErrZeroValue
			}
			r.B = r.B[expectedLength:]
		default:
			return canoto.ErrUnknownField
		}

		minField = field + 1
	}
	return nil
}

// ValidCanoto validates that the struct can be correctly marshaled into the
// Canoto format.
//
// Specifically, ValidCanoto ensures:
// 1. All OneOfs are specified at most once.
// 2. All strings are valid utf-8.
// 3. All custom fields are ValidCanoto.
func (c *executionResults) ValidCanoto() bool {
	if c == nil {
		return true
	}
	if !(&c.by).ValidCanoto() {
		return false
	}
	return true
}

// CalculateCanotoCache populates size and OneOf caches based on the current
// values in the struct.
func (c *executionResults) CalculateCanotoCache() {
	if c == nil {
		return
	}
	var size uint64
	(&c.by).CalculateCanotoCache()
	if fieldSize := (&c.by).CachedCanotoSize(); fieldSize != 0 {
		size += uint64(len(canoto__executionResults__by__tag)) + canoto.SizeUint(fieldSize) + fieldSize
	}
	if !canoto.IsZero(c.gasUsed) {
		size += uint64(len(canoto__executionResults__gasUsed__tag)) + canoto.SizeFint64
	}
	if !canoto.IsZero(c.receiptRoot) {
		size += uint64(len(canoto__executionResults__receiptRoot__tag)) + canoto.SizeBytes((&c.receiptRoot)[:])
	}
	if !canoto.IsZero(c.stateRootPost) {
		size += uint64(len(canoto__executionResults__stateRootPost__tag)) + canoto.SizeBytes((&c.stateRootPost)[:])
	}
	c.canotoData.size.Store(size)
}

// CachedCanotoSize returns the previously calculated size of the Canoto
// representation from CalculateCanotoCache.
//
// If CalculateCanotoCache has not yet been called, it will return 0.
//
// If the struct has been modified since the last call to CalculateCanotoCache,
// the returned size may be incorrect.
func (c *executionResults) CachedCanotoSize() uint64 {
	if c == nil {
		return 0
	}
	return c.canotoData.size.Load()
}

// MarshalCanoto returns the Canoto representation of this struct.
//
// It is assumed that this struct is ValidCanoto.
func (c *executionResults) MarshalCanoto() []byte {
	c.CalculateCanotoCache()
	w := canoto.Writer{
		B: make([]byte, 0, c.CachedCanotoSize()),
	}
	w = c.MarshalCanotoInto(w)
	return w.B
}

// MarshalCanotoInto writes the struct into a [canoto.Writer] and returns the
// resulting [canoto.Writer]. Most users should just use MarshalCanoto.
//
// It is assumed that CalculateCanotoCache has been called since the last
// modification to this struct.
//
// It is assumed that this struct is ValidCanoto.
func (c *executionResults) MarshalCanotoInto(w canoto.Writer) canoto.Writer {
	if c == nil {
		return w
	}
	if fieldSize := (&c.by).CachedCanotoSize(); fieldSize != 0 {
		canoto.Append(&w, canoto__executionResults__by__tag)
		canoto.AppendUint(&w, fieldSize)
		w = (&c.by).MarshalCanotoInto(w)
	}
	if !canoto.IsZero(c.gasUsed) {
		canoto.Append(&w, canoto__executionResults__gasUsed__tag)
		canoto.AppendFint64(&w, c.gasUsed)
	}
	if !canoto.IsZero(c.receiptRoot) {
		canoto.Append(&w, canoto__executionResults__receiptRoot__tag)
		canoto.AppendBytes(&w, (&c.receiptRoot)[:])
	}
	if !canoto.IsZero(c.stateRootPost) {
		canoto.Append(&w, canoto__executionResults__stateRootPost__tag)
		canoto.AppendBytes(&w, (&c.stateRootPost)[:])
	}
	return w
}

const (
	canoto__gasClock__time__tag     = "\x09" // canoto.Tag(1, canoto.I64)
	canoto__gasClock__consumed__tag = "\x11" // canoto.Tag(2, canoto.I64)
)

type canotoData_gasClock struct {
	size atomic.Uint64
}

// CanotoSpec returns the specification of this canoto message.
func (*gasClock) CanotoSpec(...reflect.Type) *canoto.Spec {
	var zero gasClock
	s := &canoto.Spec{
		Name: "gasClock",
		Fields: []canoto.FieldType{
			canoto.FieldTypeFromFint(
				/*type inference:*/ zero.time,
				/*FieldNumber:   */ 1,
				/*Name:          */ "time",
				/*FixedLength:   */ 0,
				/*Repeated:      */ false,
				/*OneOf:         */ "",
			),
			canoto.FieldTypeFromFint(
				/*type inference:*/ zero.consumed,
				/*FieldNumber:   */ 2,
				/*Name:          */ "consumed",
				/*FixedLength:   */ 0,
				/*Repeated:      */ false,
				/*OneOf:         */ "",
			),
		},
	}
	s.CalculateCanotoCache()
	return s
}

// MakeCanoto creates a new empty value.
func (*gasClock) MakeCanoto() *gasClock {
	return new(gasClock)
}

// UnmarshalCanoto unmarshals a Canoto-encoded byte slice into the struct.
//
// During parsing, the canoto cache is saved.
func (c *gasClock) UnmarshalCanoto(bytes []byte) error {
	r := canoto.Reader{
		B: bytes,
	}
	return c.UnmarshalCanotoFrom(r)
}

// UnmarshalCanotoFrom populates the struct from a [canoto.Reader]. Most users
// should just use UnmarshalCanoto.
//
// During parsing, the canoto cache is saved.
//
// This function enables configuration of reader options.
func (c *gasClock) UnmarshalCanotoFrom(r canoto.Reader) error {
	// Zero the struct before unmarshaling.
	*c = gasClock{}
	c.canotoData.size.Store(uint64(len(r.B)))

	var minField uint32
	for canoto.HasNext(&r) {
		field, wireType, err := canoto.ReadTag(&r)
		if err != nil {
			return err
		}
		if field < minField {
			return canoto.ErrInvalidFieldOrder
		}

		switch field {
		case 1:
			if wireType != canoto.I64 {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadFint64(&r, &c.time); err != nil {
				return err
			}
			if canoto.IsZero(c.time) {
				return canoto.ErrZeroValue
			}
		case 2:
			if wireType != canoto.I64 {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadFint64(&r, &c.consumed); err != nil {
				return err
			}
			if canoto.IsZero(c.consumed) {
				return canoto.ErrZeroValue
			}
		default:
			return canoto.ErrUnknownField
		}

		minField = field + 1
	}
	return nil
}

// ValidCanoto validates that the struct can be correctly marshaled into the
// Canoto format.
//
// Specifically, ValidCanoto ensures:
// 1. All OneOfs are specified at most once.
// 2. All strings are valid utf-8.
// 3. All custom fields are ValidCanoto.
func (c *gasClock) ValidCanoto() bool {
	if c == nil {
		return true
	}
	return true
}

// CalculateCanotoCache populates size and OneOf caches based on the current
// values in the struct.
func (c *gasClock) CalculateCanotoCache() {
	if c == nil {
		return
	}
	var size uint64
	if !canoto.IsZero(c.time) {
		size += uint64(len(canoto__gasClock__time__tag)) + canoto.SizeFint64
	}
	if !canoto.IsZero(c.consumed) {
		size += uint64(len(canoto__gasClock__consumed__tag)) + canoto.SizeFint64
	}
	c.canotoData.size.Store(size)
}

// CachedCanotoSize returns the previously calculated size of the Canoto
// representation from CalculateCanotoCache.
//
// If CalculateCanotoCache has not yet been called, it will return 0.
//
// If the struct has been modified since the last call to CalculateCanotoCache,
// the returned size may be incorrect.
func (c *gasClock) CachedCanotoSize() uint64 {
	if c == nil {
		return 0
	}
	return c.canotoData.size.Load()
}

// MarshalCanoto returns the Canoto representation of this struct.
//
// It is assumed that this struct is ValidCanoto.
func (c *gasClock) MarshalCanoto() []byte {
	c.CalculateCanotoCache()
	w := canoto.Writer{
		B: make([]byte, 0, c.CachedCanotoSize()),
	}
	w = c.MarshalCanotoInto(w)
	return w.B
}

// MarshalCanotoInto writes the struct into a [canoto.Writer] and returns the
// resulting [canoto.Writer]. Most users should just use MarshalCanoto.
//
// It is assumed that CalculateCanotoCache has been called since the last
// modification to this struct.
//
// It is assumed that this struct is ValidCanoto.
func (c *gasClock) MarshalCanotoInto(w canoto.Writer) canoto.Writer {
	if c == nil {
		return w
	}
	if !canoto.IsZero(c.time) {
		canoto.Append(&w, canoto__gasClock__time__tag)
		canoto.AppendFint64(&w, c.time)
	}
	if !canoto.IsZero(c.consumed) {
		canoto.Append(&w, canoto__gasClock__consumed__tag)
		canoto.AppendFint64(&w, c.consumed)
	}
	return w
}
